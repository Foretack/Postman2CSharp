@inherits MainLayoutComponent
@page "/Upload"
@implements IDisposable

<PageHeader Title="Upload"
            SubTitle="Upload your Postman collections and transform them into C# HttpClients with Postman2CSharp"
            Keywords="upload, generator, postman collections, transform, C# HttpClient" />

<BreadCrumbs Items="@BreadCrumbs"></BreadCrumbs>

<MudText Typo="Typo.h1" Class="mt-4">Upload your Postman Collections</MudText>

<br/>

@if (LazyLoader.UploadLoaded)
{
    <div class="code-writing-options-contianer">
        <MudPaper Style="padding: 16px;">
            <ApiClientOptionsComponent></ApiClientOptionsComponent>
        </MudPaper>
    </div>

    <CollectionUpload SuccessfulUpload="OnSuccessfulUpload"></CollectionUpload>
}


@code {
    [Inject] private LazyLoader? LazyAssemblyLoader { get; set; }
    private static readonly List<BreadcrumbItem> BreadCrumbs = new()
    {
        new("Home", "/", icon: Icons.Home),
        new("Upload", "/Upload", true, Icons.CloudDownload)
    };

    protected override void OnInitialized()
    {
        TabsService.Value.SetHome(null);
        if (!LazyLoader.UploadLoaded)
        {
            throw new Exception("Something went wrong. Reload the page.");
        }
        LazyLoader.UploadLoadedChanged += OnUploadLoaded;
    }

    private async Task OnSuccessfulUpload(ApiCollection apiCollection)
    {
        await Layout.AddApiCollection(apiCollection);
        Navigate.Value.ToCollection(apiCollection.Id);
        NavMenu.CollectionsExpanded = true;
    }

    private async Task OnUploadLoaded(bool loaded)
    {
        if (loaded)
        {
            await InvokeAsync(StateHasChanged);
        }
    }


    public void Dispose()
    {
        LazyLoader.UploadLoadedChanged -= OnUploadLoaded;
    }

}
